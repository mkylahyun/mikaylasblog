[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/first_file.html",
    "href": "posts/first_file.html",
    "title": "mikaylasblog",
    "section": "",
    "text": "I will be using Spotify’s API data to address people’s preference on happier or sadder music across the globe, and whether music influences people’s mental health.\nSpotify API data This data provides information on music artists, tracks, audio features, and various song attributes from the Spotify Data Catalouge. My motivation for looking at this data is to see what songs are most globally popular, and what the audio features of these popular songs are like."
  },
  {
    "objectID": "posts/first_file.html#exploring-the-data",
    "href": "posts/first_file.html#exploring-the-data",
    "title": "mikaylasblog",
    "section": "Exploring the data",
    "text": "Exploring the data\nSince we are getting data from the web, Spotify’s API, I went to https://developer.spotify.com/dashboard/login and got my credentials to access the data.\n\nimport spotipy\nfrom spotipy.oauth2 import SpotifyClientCredentials\nimport spotify_key\nsp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(client_id=spotify_key.CLIENT_ID,\n                                                           client_secret=spotify_key.CLIENT_SECRET))\n\n\nTop Songs - Global Playlist\nI am interested in what songs are the most popular globally, so I focused on the “Top Songs - Global” playlist which is curated by Spotify already.\n\nplaylist_link = \"https://open.spotify.com/playlist/37i9dQZEVXbNG2KDcFcKOF?si=1333723a6eff4b7f\"\nplaylist_URI = playlist_link.split(\"/\")[-1].split(\"?\")[0]\ntrack_uris = [x[\"track\"][\"uri\"] for x in sp.playlist_tracks(playlist_URI)[\"items\"]]\n\n\nartist_name = []\ntrack_name = []\npopularity = []\ntrack_id = []\nartist_uri = []\nartist_info = []\nartist_pop = []\nartist_genres = []\n\n\n\nfor track in sp.playlist_tracks(playlist_URI)['items']:\n  #Track id\n  track_id.append(track['track']['id'])\n    \n  #Track name\n  track_name.append(track[\"track\"][\"name\"])\n    \n  #Artist\n  artist_uri = track[\"track\"][\"artists\"][0][\"uri\"]\n  artist_info = sp.artist(artist_uri)\n    \n  #Name, popularity, genre\n  artist_name.append(track[\"track\"][\"artists\"][0][\"name\"])\n  artist_pop.append(artist_info[\"popularity\"])\n  artist_genres.append(artist_info[\"genres\"])\n\n  #Popularity of the track\n  popularity.append(track[\"track\"][\"popularity\"])\n  \n\n\nimport pandas as pd\n\naudio = sp.audio_features(track_id)\naudio_df = pd.DataFrame(sp.audio_features(track_id))\naudio_df = audio_df[['acousticness','danceability','energy','instrumentalness','loudness','speechiness','tempo','valence']]\n\nI have gathered the important data needed, which includes artist name, track name, track id, track popularity, artist popularity, artist genre, acousticness, danceability, energy, instrumentalness, loudness, speechiness, tempo, and valence. After gathering specific information, I put it together in a dataframe.\n\nAudio Features\n\nAcousticness represents how acoustic a track is. High confidence a track is acoustic is indicated by 1.0.\nDanceability indicates how suitable a track is for dancing based on tempo, beat, strength, and other features. 1.0 is most danceable.\nEnergy represents the perceived measure of intensity and activity, with high energy track feeling fast and loud.\nInstrumentalness indicates whether a track contains mostly instrumentals with no vocals. The higher the value is, the greater likelihood the track has no vocals.\nSpeechiness is determined by the presence of spoken words. High values represent tracks with mostly spoken words, for example, rap.\nTempo is the estimated BPM (beats per minute) of a track. High BPM indicates faster speed.\nValence describes the positiveness of a track. High valence tracks sound happy and low valence tracks sound sad.\n\n\ntop50_df = pd.DataFrame({'artist_name' : artist_name,\n                        'track_name' : track_name,\n                        'track_id' : track_id,\n                        'track popularity': popularity,\n                        'artist popularity': artist_pop,\n                        'artist genre': artist_genres,\n                        'acousticness': list(audio_df['acousticness']),\n                        'danceability': list(audio_df['danceability']),\n                        'energy': list(audio_df['energy']),\n                        'instrumentalness':  list(audio_df['instrumentalness']),\n                        'loudness': list(audio_df['loudness']),\n                        'speechiness': list(audio_df['speechiness']),\n                        'tempo': list(audio_df['tempo']),\n                        'valence': list(audio_df['valence'])})\n\n\ntop50_df.head()\n\n\n\n\n\n  \n    \n      \n      artist_name\n      track_name\n      track_id\n      track popularity\n      artist popularity\n      artist genre\n      acousticness\n      danceability\n      energy\n      instrumentalness\n      loudness\n      speechiness\n      tempo\n      valence\n    \n  \n  \n    \n      0\n      KAROL G\n      TQG\n      0DWdj2oZMBFSzRsi2Cvfzf\n      93\n      94\n      [reggaeton, reggaeton colombiano, urbano latino]\n      0.6730\n      0.720\n      0.630\n      0.000000\n      -3.547\n      0.2770\n      179.974\n      0.607\n    \n    \n      1\n      The Weeknd\n      Die For You - Remix\n      7oDd86yk8itslrA9HRP2ki\n      93\n      99\n      [canadian contemporary r&b, canadian pop, pop]\n      0.2320\n      0.531\n      0.525\n      0.000000\n      -6.500\n      0.0671\n      66.900\n      0.502\n    \n    \n      2\n      Miley Cyrus\n      Flowers\n      0yLdNVWF3Srea0uzk55zFn\n      100\n      92\n      [pop]\n      0.0632\n      0.707\n      0.681\n      0.000005\n      -4.325\n      0.0668\n      117.999\n      0.646\n    \n    \n      3\n      SZA\n      Kill Bill\n      1Qrg8KqiBpW07V7PNxwwwL\n      93\n      95\n      [pop, r&b]\n      0.0521\n      0.644\n      0.735\n      0.144000\n      -5.747\n      0.0391\n      88.980\n      0.418\n    \n    \n      4\n      PinkPantheress\n      Boy's a liar Pt. 2\n      6AQbmUe0Qwf5PZnt4HmTXv\n      94\n      86\n      []\n      0.2520\n      0.696\n      0.809\n      0.000128\n      -8.254\n      0.0500\n      132.962\n      0.857\n    \n  \n\n\n\n\n\ntop50_df.describe()\n\n\n\n\n\n  \n    \n      \n      track popularity\n      artist popularity\n      acousticness\n      danceability\n      energy\n      instrumentalness\n      loudness\n      speechiness\n      tempo\n      valence\n    \n  \n  \n    \n      count\n      50.000000\n      50.000000\n      50.000000\n      50.000000\n      50.000000\n      50.000000\n      50.000000\n      50.000000\n      50.000000\n      50.000000\n    \n    \n      mean\n      87.160000\n      89.040000\n      0.235176\n      0.677320\n      0.652800\n      0.020879\n      -6.087180\n      0.093092\n      124.852020\n      0.493070\n    \n    \n      std\n      8.462064\n      6.449047\n      0.216901\n      0.132686\n      0.139459\n      0.098529\n      2.186116\n      0.079960\n      32.138261\n      0.226829\n    \n    \n      min\n      46.000000\n      74.000000\n      0.001460\n      0.442000\n      0.234000\n      0.000000\n      -14.520000\n      0.025400\n      66.900000\n      0.038500\n    \n    \n      25%\n      86.000000\n      85.250000\n      0.063275\n      0.559500\n      0.556500\n      0.000000\n      -6.939500\n      0.043475\n      96.332250\n      0.305500\n    \n    \n      50%\n      89.000000\n      89.000000\n      0.139500\n      0.687500\n      0.676500\n      0.000007\n      -5.673500\n      0.057200\n      125.968000\n      0.498000\n    \n    \n      75%\n      91.000000\n      94.000000\n      0.375750\n      0.781750\n      0.748000\n      0.000263\n      -4.892000\n      0.110250\n      142.261000\n      0.620250\n    \n    \n      max\n      100.000000\n      100.000000\n      0.777000\n      0.954000\n      0.965000\n      0.670000\n      -1.602000\n      0.326000\n      203.759000\n      0.962000\n    \n  \n\n\n\n\n\ntop50_df.sort_values(by = 'track popularity')[-10:].plot.barh(x = 'artist_name', y = 'artist popularity')\n\n<AxesSubplot: ylabel='artist_name'>\n\n\n\n\n\n\ntop50_df.sort_values(by = 'track popularity')[-10:].plot(y = 'valence', x = 'track popularity', kind = \"scatter\")\n\n<AxesSubplot: xlabel='track popularity', ylabel='valence'>\n\n\n\n\n\n\ntop50_df.plot(y = 'energy', kind = 'hist')\n\n<AxesSubplot: ylabel='Frequency'>\n\n\n\n\n\n\ntop50_df['energy'].describe()\n\ncount    50.000000\nmean      0.652800\nstd       0.139459\nmin       0.234000\n25%       0.556500\n50%       0.676500\n75%       0.748000\nmax       0.965000\nName: energy, dtype: float64\n\n\n\ntop50_df.sort_values(by = 'track popularity')[-10:].plot.barh(x = 'track_name', y = 'danceability')\n\n<AxesSubplot: ylabel='track_name'>"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "mikaylasblog",
    "section": "",
    "text": "Description of data\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 9, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMar 6, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  }
]